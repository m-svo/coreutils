#!/bin/sh
# demonstrate that tail -F works when renaming the tailed files
# Before coreutils-8.3, tail -F a b would stop tracking additions to b
# after "mv a b".

# Copyright (C) 2009-2010 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if test "$VERBOSE" = yes; then
  set -x
  tail --version
fi

. $srcdir/test-lib.sh

touch a b || framework_failure

debug='---disable-inotify -s .01'
debug=
tail $debug -F a b > out 2>&1 & pid=$!

# Wait until tail has started...
echo x > a
until grep '^x$' out >/dev/null 2>&1; do :; done

mv a b || fail=1

# Wait for the diagnostic:
# tail: `a' has become inaccessible: No such file or directory
until grep inaccessible out >/dev/null 2>&1; do :; done

echo x > a
# Wait up to 6.3s for this to appear in the output:
# "tail: `...' has appeared;  following end of new file"
tail_f_vs_rename_1()
{
  local delay="$1"
  grep 'has appeared;' out > /dev/null ||
    { sleep $delay; return 1; }
}
retry_delay_ tail_f_vs_rename_1 .1 7 ||
  { echo "$0: a: unexpected delay?"; cat out; fail=1; }

echo y >> b
# Wait up to 6.3s for "y" to appear in the output:
tail_f_vs_rename_2() {
  local delay="$1"
  tr '\n' @ < out | grep '@@==> b <==@y@$' > /dev/null ||
    { sleep $delay; return 1; }
}
retry_delay_ tail_f_vs_rename_2 .1 7 ||
  { echo "$0: b: unexpected delay?"; cat out; fail=1; }

echo z >> a
# Wait up to 6.3s for "z" to appear in the output:
tail_f_vs_rename_3() {
  local delay="$1"
  tr '\n' @ < out | grep '@@==> a <==@z@$' > /dev/null ||
    { sleep $delay; return 1; }
}
retry_delay_ tail_f_vs_rename_3 .1 7 ||
  { echo "$0: a: unexpected delay?"; cat out; fail=1; }

kill -HUP $pid

Exit $fail
