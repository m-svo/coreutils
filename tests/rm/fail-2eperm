#!/bin/sh
# Like fail-eperm, but the failure must be for a file encountered
# while trying to remove the containing directory with the sticky bit set.

if test "$VERBOSE" = yes; then
  set -x
  rm --version
fi

. $srcdir/../lang-default
PRIV_CHECK_ARG=require-root . $srcdir/../priv-check

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd $pwd; chmod -R u+rwx $t0; rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1

: ${NON_ROOT_USERNAME=nobody}

# Ensure that the supplied username is valid and with UID != 0.
setuidgid $NON_ROOT_USERNAME id -u > id || \
  {
    echo "$0: Skipping this test.  To enable it, set the envvar" 1>&2
    echo "$0: NON_ROOT_USERNAME to a non-root user name." 1>&2
    (exit 77); exit 77
  }
test `cat id` = 0 && \
  {
    echo "$0: The specified NON_ROOT_USERNAME ($NON_ROOT_USERNAME)" 1>&2
    echo "$0: is invalid because its UID is 0." 1>&2
    (exit 1); exit 1
  }

# The containing directory must be owned by the user who eventually runs rm.
chown $NON_ROOT_USERNAME .

mkdir a || framework_failure=1
chmod 1777 a || framework_failure=1
touch a/b || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

fail=0

setuidgid $NON_ROOT_USERNAME rm -rf a 2> out && fail=1
cat <<\EOF > exp
rm: cannot remove `a/b': Operation not permitted
EOF

cmp out exp || fail=1
test $fail = 1 && diff out exp 2> /dev/null

(exit $fail); exit $fail
