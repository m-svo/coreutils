#!/bin/sh
# Ensure that stty diagnoses invalid inputs, rather than silently misbehaving.

# Copyright (C) 2007 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if test "$VERBOSE" = yes; then
  set -x
  stty --version
fi

# Make sure there's a tty on stdin.
. $srcdir/../input-tty

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd "$pwd" && chmod -R u+rwx $t0 && rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

fail=0

saved_state=`stty -g` || fail=1
stty $saved_state || fail=1

# Before coreutils-6.10, if stty were given an argument with 35 colons
# separating 36 hexadecimal strings, stty would fail to diagnose as invalid
# any number that was out of range as long as sscanf happened to
# overflow/wrap it back into the range of the corresponding type (either
# tcflag_t or cc_t).

# For each of the following, before 6.10, stty would fail to
# diagnose the error on at least Solaris 10.
hex_2_64=10000000000000000
stty `echo $saved_state |sed 's/^[^:]*:/'$hex_2_64:/`     2>/dev/null && fail=1
stty `echo $saved_state |sed 's/:[0-9a-f]*$/:'$hex_2_64/` 2>/dev/null && fail=1

# Just in case either of the above mistakenly succeeds (and changes
# the state of our tty), try to restore the initial state.
stty $saved_state || fail=1

(exit $fail); exit $fail
