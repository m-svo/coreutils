#!/bin/sh
# Make sure cp -pR --parents isn't too generous with parent permissions.

# Copyright (C) 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

if test "$VERBOSE" = yes; then
  set -x
  cp --version
fi

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp;tmp=$t0/$$
trap 'status=$?; cd "$pwd" && rm -rf $t0 && exit $status' 0
trap '(exit $?); exit' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1

umask 022
mkdir -p a d || framework_failure=1
mkfifo a/fifo || {
  echo "$0: fifos not supported; skipping this test." 1>&2
  (exit 77); exit 77
}

# Copy a fifo's contents.  That way, we can examine d/a's
# state while cp is running.
cp -p -R --copy-contents --parents a d &
cp_pid=$!

(
  # Now 'cp' is reading the fifo.
  # Check the permissions of the temporary destination
  # directory that 'cp' has made.
  ls -ld d/a >d/ls.out

  # Close the fifo so that "cp" can continue.  But output first,
  # before exiting, otherwise some shells would optimize away the file
  # descriptor that holds the fifo open.
  echo foo
) >a/fifo

case `cat d/ls.out` in
d???--[-S]--[-S]*)
  fail=0;;
*)
  fail=1;;
esac

wait $cp_pid || fail=1

(exit $fail); exit $fail
