#!/bin/sh
# Ensure that ls --file-type does not call stat unnecessarily.
# The trick is to create an un-stat'able symlink and to see if ls
# can report its type nonetheless, using dirent.d_type.

if test "$VERBOSE" = yes; then
  set -x
  ls --version
fi

. $srcdir/../envvar-check

# Skip this test unless "." is on a file system with useful d_type info.
# FIXME: use a more dynamic test for this, since whether d_type is useful
# depends on much more than the file system type.  For example, with
# linux-2.6.15, at least tmpfs and ext3 work, but reiserfs and xfs don't.
# Also, tmpfs on Solaris 10 lacks d_type support.
skip=yes
fs_type=`stat -f --printf %T .`
test `uname -s` = Linux && test $fs_type = tmpfs && skip=no
test $fs_type = ext2/ext3 && skip=no
test $skip = yes &&
  {
    echo "$0: '.' is not on a suitable file system for this test" 1>&2
    echo "$0: skipping this test" 1>&2
    (exit 77); exit 77
  }

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd $pwd; chmod -R u+rwx $t0; rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1

mkdir d || framework_failure=1
ln -s / d/s || framework_failure=1
chmod 600 d || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

fail=0

ls --file-type d > out || fail=1
cat <<\EOF > exp || fail=1
s@
EOF

cmp out exp || fail=1
test $fail = 1 && diff out exp 2> /dev/null

(exit $fail); exit $fail
