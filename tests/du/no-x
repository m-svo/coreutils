#!/bin/sh
# Make sure du gives the right diagnostic for a readable,
# but inaccessible directory.

# Copyright (C) 2003, 2006-2007 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if test "$VERBOSE" = yes; then
  set -x
  du --version
fi

. $srcdir/../lang-default
PRIV_CHECK_ARG=require-non-root . $srcdir/../priv-check

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd "$pwd" && chmod -R u+rwx $t0 && rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1
mkdir -p d/no-x/y || framework_failure=1
chmod u=rw d/no-x || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

fail=0

# This must exit nonzero.
du d >/dev/null 2>out && fail=1

# Depending on whether du/fts is using native fdopendir, we see one
# of the following diagnostics (note also the /y suffix in one case):
#   du: `d/no-x': Permission denied
#   du: cannot access `d/no-x/y': Permission denied
#   du: cannot read directory `d/no-x': Permission denied
# Convert either of the latter two to the first one.

sed 's/^du: cannot access /du: /' out > t && mv t out
sed 's/^du: cannot read directory /du: /' out > t && mv t out
sed 's,d/no-x/y,d/no-x,' out > t && mv t out

cat <<\EOF > exp
du: `d/no-x': Permission denied
EOF

cmp out exp || fail=1
test $fail = 1 && diff out exp 2> /dev/null

(exit $fail); exit $fail
